generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int               @id @default(autoincrement())
  first_name        String
  last_name         String
  email             String            @unique
  phone             String            @unique
  password          String
  profile_picture   String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  address_id        Int?
  rating            Float?
  ads               Ads[]             @relation("user_ads")
  member_one_chats  Chats[]           @relation("member_one")
  member_two_chats  Chats[]           @relation("member_two")
  messages_received Messages[]        @relation("message_receiver")
  messages_sent     Messages[]        @relation("message_sender")
  user_token        RefreshTokens?
  reviews_sent      Reviews[]         @relation("reviews_sent")
  reviews_received  Reviews[]         @relation("reviews_received")
  bids_sent         UserAdsBids[]     @relation("BidsSent")
  bids_received     UserAdsBids[]     @relation("BidsReceived")
  favorite_ads      UserFavoriteAds[]
  address           Locations?        @relation(fields: [address_id], references: [id])
  app_review        AppReviews?
}

model RefreshTokens {
  id         Int      @id @default(autoincrement())
  expires_in Int
  user_id    Int      @unique
  created_at DateTime @default(now())
  user       Users    @relation(fields: [user_id], references: [id])
}

model Ads {
  id                   Int               @id @default(autoincrement())
  title                String
  description          String
  is_new               Boolean
  price                Int
  user_id              Int
  category_id          Int
  is_active            Boolean           @default(true)
  created_at           DateTime          @default(now())
  updated_at           DateTime          @default(now())
  expires_on           DateTime          @default(now())
  is_for_sale          Boolean
  location_id          Int
  allow_bidding        Boolean
  ad_images            AdImages[]
  category             Categories        @relation(fields: [category_id], references: [id])
  location             Locations         @relation(fields: [location_id], references: [id])
  user                 Users             @relation("user_ads", fields: [user_id], references: [id])
  bids                 UserAdsBids[]
  in_user_favorite_ads UserFavoriteAds[]
}

model AdImages {
  id         Int      @id @default(autoincrement())
  path       String
  ad_id      Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  name       String
  ad         Ads      @relation(fields: [ad_id], references: [id], onDelete: Cascade)
}

model Categories {
  id                 Int          @id @default(autoincrement())
  name               String       @unique
  has_childs         Boolean
  parent_category_id Int?
  Ads                Ads[]
  parent_category    Categories?  @relation("Child_categories", fields: [parent_category_id], references: [id])
  child_categories   Categories[] @relation("Child_categories")
}

model Locations {
  id           Int     @id @default(autoincrement())
  longitude    Decimal
  latitude     Decimal
  ad           Ads[]
  address_text String
  user         Users[]

  @@unique([longitude, latitude])
}

model UserFavoriteAds {
  ad_id   Int
  user_id Int
  ad      Ads   @relation(fields: [ad_id], references: [id])
  user    Users @relation(fields: [user_id], references: [id])

  @@id([ad_id, user_id])
}

model UserAdsBids {
  id          Int      @id @default(autoincrement())
  ad_id       Int
  sender_id   Int
  receiver_id Int
  bid_amount  Int
  message     String
  status      String
  created_at  DateTime
  ad          Ads      @relation(fields: [ad_id], references: [id])
  sender      Users    @relation("BidsSent", fields: [sender_id], references: [id])
  receiver    Users    @relation("BidsReceived", fields: [receiver_id], references: [id])
}

model Reviews {
  id               Int      @id @default(autoincrement())
  stars            Int
  comment          String
  reviewer_user_id Int
  reviewer         Users    @relation("reviews_sent", fields: [reviewer_user_id], references: [id])
  user_id          Int
  user             Users    @relation("reviews_received", fields: [user_id], references: [id])
  created_at       DateTime
}

model Chats {
  member_one_id Int
  member_two_id Int
  member_one    Users @relation("member_one", fields: [member_one_id], references: [id])
  member_two    Users @relation("member_two", fields: [member_two_id], references: [id])

  @@id([member_one_id, member_two_id])
}

model Messages {
  id          Int      @id @default(autoincrement())
  sender_id   Int
  receiver_id Int
  content     String
  created_at  DateTime
  is_seen     Boolean
  receiver    Users    @relation("message_receiver", fields: [receiver_id], references: [id])
  sender      Users    @relation("message_sender", fields: [sender_id], references: [id])
}

model AppReviews {
  id      Int    @id @default(autoincrement())
  user_id Int    @unique
  user    Users  @relation(fields: [user_id], references: [id])
  stars   Int
  review  String
}
